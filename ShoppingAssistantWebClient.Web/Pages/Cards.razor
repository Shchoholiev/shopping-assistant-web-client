@page "/cards/{wishlistName}/{chatId}"

@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager;

<head>
    <link rel="stylesheet" href="css/Cards.css" />
</head>

<script>
    function adjustButtonContainerPosition() {
        var cardElements = document.querySelectorAll('.card, .back-card, .card-text');
        var buttonContainer = document.querySelector('.buttons-container');

        if (cardElements.length > 0 && buttonContainer) {
            var totalHeight = Array.from(cardElements).reduce((max, card) => {
                return Math.max(max, card.offsetHeight);
            }, 0);

            if (window.matchMedia('(max-width: 440px)').matches) {
                buttonContainer.style.top = `calc(20% + ${totalHeight}px + 60px)`;
            } else if (window.matchMedia('(max-width: 769px)').matches) {
                buttonContainer.style.top = `calc(12% + ${totalHeight}px + 60px)`;
            } else if (window.matchMedia('(max-width: 992px)').matches) {
                buttonContainer.style.top = `calc(8% + ${totalHeight}px + 60px)`;
            } else {
                buttonContainer.style.top = `calc(3% + ${totalHeight}px + 60px)`;
            }
        }
    }

    window.addEventListener('load', adjustButtonContainerPosition);
    window.addEventListener('resize', adjustButtonContainerPosition);

</script>

<div class="card-page">
    <button class="back-button button-animation" @onclick="NavigateToMain"></button>
    <div class="container">
        <div class="head">
            <p class="header-text">@wishlistName</p>
        </div>
    
        <div class="content" data-generalTop="3%" data-largeTop="8%" mediumTop="12%" smallTop="20%">
            <div class="back-card"></div>
            @if (Products != null && Products.Count != 0 && currentProduct != Products.Count && currentProduct >= 0) {
                <div class="card">
                    <div class="slider-container">
                        <div class="slider">
                            @for(int i = 0; i < Products[currentProduct].ImagesUrls.Length && i < 3; i++) {
                                string image = Products[currentProduct].ImagesUrls[i];
                                if (currentImage == image) {
                                    <img src="@image" class="slider-image" alt="product image"/>
                                }
                            }
                            <img class="next-image" src="/images/next-image.png" alt="next image" @onclick="(() => ChangeImage(currentImage))"/>
                            <img class="prev-image" src="/images/prev-image.png" alt="previous image" @onclick="(() => ChangeImage(currentImage))"/>
                        </div>
                        <div class="dots">
                            @for (var i = 0; i < Products[currentProduct].ImagesUrls.Length && i < 3; i++) {
                                var dotIndex = i;
                                <div class="dot @(i == currentIndex ? "active-dot" : "")" @onclick="(() => ChangeImageDot(dotIndex))"></div>
                            }
                        </div>
                    </div>
                    <div class="product-info">

                        <p class="name">@Products[currentProduct].Name</p>
                        <p class="description">@Products[currentProduct].Description</p>

                        <div class="rating-price-row">
                            <label class="rating">@Products[currentProduct].Rating</label>
                            @{
                                int whole = (int)Math.Floor(Products[currentProduct].Rating);
                                double fractal = Products[currentProduct].Rating - whole;
                            }
                            @for(int i = 0; i < 5; i++) {
                                if(i < whole) {
                                    <img class="star" src="/images/star-cards.png" alt="star">
                                    continue;
                                }
                                if(fractal != 0.0) {
                                    <img class="star" src="/images/half-star.png" alt="star">
                                    fractal -= fractal;
                                }
                                else {
                                    <img class="star" src="/images/empty-star.png" alt="star">
                                }
                            }
                            <label class="price-label">@Products[currentProduct].Price</label>
                        </div>
                    </div>
                </div>
                <div class="buttons-container">
                    <div class="buttons-row">
                        <button class="cancel-button button-animation" @onclick="(() => LoadNextProduct())"></button>
                        <button class="return-button button-animation" @onclick="(() => LoadPreviousProduct())"></button>
                        <button class="like-button button-animation" @onclick="(() => LoadNextProduct())"></button>
                    </div>
                </div>

                if(!isProductsNull) {
                    isProductsNull = true;
                    StateHasChanged();
                }
            }
            else {
                <style>
                    .back-card {
                        display: none;
                    }
                </style>
                <div class="card-text">
                    <label class="bold-text">The cards ended</label>
                    <label class="more-text">Click <img class="plus-image" src="/images/load-more-small.png" alt="plus"/> to see more<br> or <img src="/images/return-small.png" alt="return"/> to exit</label>
                </div>
                <div class="buttons-container">
                    <div class="buttons-row">
                        <button class="exit-button button-animation" @onclick="(() => NavigateToMain())"></button>
                        <button class="return-button button-animation" @onclick="(() => { LoadPreviousProduct();  })"></button>
                        <button class="more-button button-animation" @onclick="(() => LoadMoreProducts())"></button>
                    </div>
                </div>

                if(isProductsNull) {
                    isProductsNull = false;
                    StateHasChanged();
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string wishlistName { get; set; }

    [Parameter] public string chatId {get; set;}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("adjustButtonContainerPosition");
    }

    private void NavigateToMain() {
        navigationManager.NavigateTo($"/chat/{chatId}");
    }
}